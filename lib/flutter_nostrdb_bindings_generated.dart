// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/nostrdb/src/nostrdb.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlutterNostrdbBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterNostrdbBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterNostrdbBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// CONFIG
  void ndb_default_config(ffi.Pointer<NdbConfig> arg0) {
    return _ndb_default_config(arg0);
  }

  late final _ndb_default_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NdbConfig>)>>(
        'ndb_default_config',
      );
  late final _ndb_default_config =
      _ndb_default_configPtr
          .asFunction<void Function(ffi.Pointer<NdbConfig>)>();

  void ndb_config_set_ingest_threads(
    ffi.Pointer<NdbConfig> config,
    int threads,
  ) {
    return _ndb_config_set_ingest_threads(config, threads);
  }

  late final _ndb_config_set_ingest_threadsPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NdbConfig>, ffi.Int)>
  >('ndb_config_set_ingest_threads');
  late final _ndb_config_set_ingest_threads =
      _ndb_config_set_ingest_threadsPtr
          .asFunction<void Function(ffi.Pointer<NdbConfig>, int)>();

  void ndb_config_set_flags(ffi.Pointer<NdbConfig> config, int flags) {
    return _ndb_config_set_flags(config, flags);
  }

  late final _ndb_config_set_flagsPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NdbConfig>, ffi.Int)>
  >('ndb_config_set_flags');
  late final _ndb_config_set_flags =
      _ndb_config_set_flagsPtr
          .asFunction<void Function(ffi.Pointer<NdbConfig>, int)>();

  void ndb_config_set_mapsize(ffi.Pointer<NdbConfig> config, int mapsize) {
    return _ndb_config_set_mapsize(config, mapsize);
  }

  late final _ndb_config_set_mapsizePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NdbConfig>, ffi.Size)>
  >('ndb_config_set_mapsize');
  late final _ndb_config_set_mapsize =
      _ndb_config_set_mapsizePtr
          .asFunction<void Function(ffi.Pointer<NdbConfig>, int)>();

  void ndb_config_set_ingest_filter(
    ffi.Pointer<NdbConfig> config,
    ndb_ingest_filter_fn fn,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _ndb_config_set_ingest_filter(config, fn, arg2);
  }

  late final _ndb_config_set_ingest_filterPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<NdbConfig>,
        ndb_ingest_filter_fn,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('ndb_config_set_ingest_filter');
  late final _ndb_config_set_ingest_filter =
      _ndb_config_set_ingest_filterPtr
          .asFunction<
            void Function(
              ffi.Pointer<NdbConfig>,
              ndb_ingest_filter_fn,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void ndb_config_set_subscription_callback(
    ffi.Pointer<NdbConfig> config,
    ndb_sub_fn fn,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _ndb_config_set_subscription_callback(config, fn, ctx);
  }

  late final _ndb_config_set_subscription_callbackPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<NdbConfig>,
        ndb_sub_fn,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('ndb_config_set_subscription_callback');
  late final _ndb_config_set_subscription_callback =
      _ndb_config_set_subscription_callbackPtr
          .asFunction<
            void Function(
              ffi.Pointer<NdbConfig>,
              ndb_sub_fn,
              ffi.Pointer<ffi.Void>,
            )
          >();

  /// Configurable scratch buffer size for the writer thread. Default is 2MB. If you have smaller notes
  /// you can decrease this to reduce memory usage. If you have bigger notes you should increase this so
  /// that the writer thread can properly parse larger notes.
  void ndb_config_set_writer_scratch_buffer_size(
    ffi.Pointer<NdbConfig> config,
    int scratch_size,
  ) {
    return _ndb_config_set_writer_scratch_buffer_size(config, scratch_size);
  }

  late final _ndb_config_set_writer_scratch_buffer_sizePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NdbConfig>, ffi.Int)>
  >('ndb_config_set_writer_scratch_buffer_size');
  late final _ndb_config_set_writer_scratch_buffer_size =
      _ndb_config_set_writer_scratch_buffer_sizePtr
          .asFunction<void Function(ffi.Pointer<NdbConfig>, int)>();

  /// HELPERS
  int ndb_calculate_id(
    ffi.Pointer<NdbNote> note,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int buflen,
  ) {
    return _ndb_calculate_id(note, buf, buflen);
  }

  late final _ndb_calculate_idPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<NdbNote>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
      )
    >
  >('ndb_calculate_id');
  late final _ndb_calculate_id =
      _ndb_calculate_idPtr
          .asFunction<
            int Function(
              ffi.Pointer<NdbNote>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
            )
          >();

  int ndb_sign_id(
    ffi.Pointer<ndb_keypair> keypair,
    ffi.Pointer<ffi.UnsignedChar> id,
    ffi.Pointer<ffi.UnsignedChar> sig,
  ) {
    return _ndb_sign_id(keypair, id, sig);
  }

  late final _ndb_sign_idPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ndb_keypair>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Pointer<ffi.UnsignedChar>,
      )
    >
  >('ndb_sign_id');
  late final _ndb_sign_id =
      _ndb_sign_idPtr
          .asFunction<
            int Function(
              ffi.Pointer<ndb_keypair>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
            )
          >();

  int ndb_create_keypair(ffi.Pointer<ndb_keypair> key) {
    return _ndb_create_keypair(key);
  }

  late final _ndb_create_keypairPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_keypair>)>>(
        'ndb_create_keypair',
      );
  late final _ndb_create_keypair =
      _ndb_create_keypairPtr
          .asFunction<int Function(ffi.Pointer<ndb_keypair>)>();

  int ndb_decode_key(
    ffi.Pointer<ffi.Char> secstr,
    ffi.Pointer<ndb_keypair> keypair,
  ) {
    return _ndb_decode_key(secstr, keypair);
  }

  late final _ndb_decode_keyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ndb_keypair>)
    >
  >('ndb_decode_key');
  late final _ndb_decode_key =
      _ndb_decode_keyPtr
          .asFunction<
            int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ndb_keypair>)
          >();

  int ndb_note_verify(
    ffi.Pointer<ffi.Void> secp_ctx,
    ffi.Pointer<ffi.UnsignedChar> pubkey,
    ffi.Pointer<ffi.UnsignedChar> id,
    ffi.Pointer<ffi.UnsignedChar> signature,
  ) {
    return _ndb_note_verify(secp_ctx, pubkey, id, signature);
  }

  late final _ndb_note_verifyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Pointer<ffi.UnsignedChar>,
      )
    >
  >('ndb_note_verify');
  late final _ndb_note_verify =
      _ndb_note_verifyPtr
          .asFunction<
            int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
            )
          >();

  /// NDB
  int ndb_init(
    ffi.Pointer<ffi.Pointer<Ndb>> ndb,
    ffi.Pointer<ffi.Char> dbdir,
    ffi.Pointer<NdbConfig> arg2,
  ) {
    return _ndb_init(ndb, dbdir, arg2);
  }

  late final _ndb_initPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Pointer<Ndb>>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<NdbConfig>,
      )
    >
  >('ndb_init');
  late final _ndb_init =
      _ndb_initPtr
          .asFunction<
            int Function(
              ffi.Pointer<ffi.Pointer<Ndb>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<NdbConfig>,
            )
          >();

  int ndb_db_version(ffi.Pointer<ndb_txn> txn) {
    return _ndb_db_version(txn);
  }

  late final _ndb_db_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_txn>)>>(
        'ndb_db_version',
      );
  late final _ndb_db_version =
      _ndb_db_versionPtr.asFunction<int Function(ffi.Pointer<ndb_txn>)>();

  /// NOTE PROCESSING
  int ndb_process_event(
    ffi.Pointer<Ndb> arg0,
    ffi.Pointer<ffi.Char> json,
    int len,
  ) {
    return _ndb_process_event(arg0, json, len);
  }

  late final _ndb_process_eventPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<Ndb>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >('ndb_process_event');
  late final _ndb_process_event =
      _ndb_process_eventPtr
          .asFunction<
            int Function(ffi.Pointer<Ndb>, ffi.Pointer<ffi.Char>, int)
          >();

  void ndb_ingest_meta_init(
    ffi.Pointer<ndb_ingest_meta> meta,
    int client,
    ffi.Pointer<ffi.Char> relay,
  ) {
    return _ndb_ingest_meta_init(meta, client, relay);
  }

  late final _ndb_ingest_meta_initPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ndb_ingest_meta>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('ndb_ingest_meta_init');
  late final _ndb_ingest_meta_init =
      _ndb_ingest_meta_initPtr
          .asFunction<
            void Function(
              ffi.Pointer<ndb_ingest_meta>,
              int,
              ffi.Pointer<ffi.Char>,
            )
          >();

  /// Process an event, recording the relay where it came from.
  int ndb_process_event_with(
    ffi.Pointer<Ndb> arg0,
    ffi.Pointer<ffi.Char> json,
    int len,
    ffi.Pointer<ndb_ingest_meta> meta,
  ) {
    return _ndb_process_event_with(arg0, json, len, meta);
  }

  late final _ndb_process_event_withPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<Ndb>,
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ndb_ingest_meta>,
      )
    >
  >('ndb_process_event_with');
  late final _ndb_process_event_with =
      _ndb_process_event_withPtr
          .asFunction<
            int Function(
              ffi.Pointer<Ndb>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ndb_ingest_meta>,
            )
          >();

  int ndb_process_events(
    ffi.Pointer<Ndb> arg0,
    ffi.Pointer<ffi.Char> ldjson,
    int len,
  ) {
    return _ndb_process_events(arg0, ldjson, len);
  }

  late final _ndb_process_eventsPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<Ndb>, ffi.Pointer<ffi.Char>, ffi.Size)
    >
  >('ndb_process_events');
  late final _ndb_process_events =
      _ndb_process_eventsPtr
          .asFunction<
            int Function(ffi.Pointer<Ndb>, ffi.Pointer<ffi.Char>, int)
          >();

  int ndb_process_events_with(
    ffi.Pointer<Ndb> ndb,
    ffi.Pointer<ffi.Char> ldjson,
    int json_len,
    ffi.Pointer<ndb_ingest_meta> meta,
  ) {
    return _ndb_process_events_with(ndb, ldjson, json_len, meta);
  }

  late final _ndb_process_events_withPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<Ndb>,
        ffi.Pointer<ffi.Char>,
        ffi.Size,
        ffi.Pointer<ndb_ingest_meta>,
      )
    >
  >('ndb_process_events_with');
  late final _ndb_process_events_with =
      _ndb_process_events_withPtr
          .asFunction<
            int Function(
              ffi.Pointer<Ndb>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ndb_ingest_meta>,
            )
          >();

  /// TODO: fix on windows
  int ndb_process_events_stream(ffi.Pointer<Ndb> arg0, ffi.Pointer<FILE> fp) {
    return _ndb_process_events_stream(arg0, fp);
  }

  late final _ndb_process_events_streamPtr = _lookup<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Ndb>, ffi.Pointer<FILE>)>
  >('ndb_process_events_stream');
  late final _ndb_process_events_stream =
      _ndb_process_events_streamPtr
          .asFunction<int Function(ffi.Pointer<Ndb>, ffi.Pointer<FILE>)>();

  /// deprecated: use ndb_ingest_event_with
  int ndb_process_client_event(
    ffi.Pointer<Ndb> arg0,
    ffi.Pointer<ffi.Char> json,
    int len,
  ) {
    return _ndb_process_client_event(arg0, json, len);
  }

  late final _ndb_process_client_eventPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<Ndb>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >('ndb_process_client_event');
  late final _ndb_process_client_event =
      _ndb_process_client_eventPtr
          .asFunction<
            int Function(ffi.Pointer<Ndb>, ffi.Pointer<ffi.Char>, int)
          >();

  /// deprecated: use ndb_ingest_events_with
  int ndb_process_client_events(
    ffi.Pointer<Ndb> arg0,
    ffi.Pointer<ffi.Char> json,
    int len,
  ) {
    return _ndb_process_client_events(arg0, json, len);
  }

  late final _ndb_process_client_eventsPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<Ndb>, ffi.Pointer<ffi.Char>, ffi.Size)
    >
  >('ndb_process_client_events');
  late final _ndb_process_client_events =
      _ndb_process_client_eventsPtr
          .asFunction<
            int Function(ffi.Pointer<Ndb>, ffi.Pointer<ffi.Char>, int)
          >();

  int ndb_begin_query(ffi.Pointer<Ndb> arg0, ffi.Pointer<ndb_txn> arg1) {
    return _ndb_begin_query(arg0, arg1);
  }

  late final _ndb_begin_queryPtr = _lookup<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Ndb>, ffi.Pointer<ndb_txn>)>
  >('ndb_begin_query');
  late final _ndb_begin_query =
      _ndb_begin_queryPtr
          .asFunction<int Function(ffi.Pointer<Ndb>, ffi.Pointer<ndb_txn>)>();

  int ndb_search_profile(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ndb_search> search,
    ffi.Pointer<ffi.Char> query,
  ) {
    return _ndb_search_profile(txn, search, query);
  }

  late final _ndb_search_profilePtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ndb_txn>,
        ffi.Pointer<ndb_search>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('ndb_search_profile');
  late final _ndb_search_profile =
      _ndb_search_profilePtr
          .asFunction<
            int Function(
              ffi.Pointer<ndb_txn>,
              ffi.Pointer<ndb_search>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  int ndb_search_profile_next(ffi.Pointer<ndb_search> search) {
    return _ndb_search_profile_next(search);
  }

  late final _ndb_search_profile_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_search>)>>(
        'ndb_search_profile_next',
      );
  late final _ndb_search_profile_next =
      _ndb_search_profile_nextPtr
          .asFunction<int Function(ffi.Pointer<ndb_search>)>();

  void ndb_search_profile_end(ffi.Pointer<ndb_search> search) {
    return _ndb_search_profile_end(search);
  }

  late final _ndb_search_profile_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndb_search>)>>(
        'ndb_search_profile_end',
      );
  late final _ndb_search_profile_end =
      _ndb_search_profile_endPtr
          .asFunction<void Function(ffi.Pointer<ndb_search>)>();

  int ndb_end_query(ffi.Pointer<ndb_txn> arg0) {
    return _ndb_end_query(arg0);
  }

  late final _ndb_end_queryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_txn>)>>(
        'ndb_end_query',
      );
  late final _ndb_end_query =
      _ndb_end_queryPtr.asFunction<int Function(ffi.Pointer<ndb_txn>)>();

  int ndb_write_last_profile_fetch(
    ffi.Pointer<Ndb> ndb,
    ffi.Pointer<ffi.UnsignedChar> pubkey,
    int fetched_at,
  ) {
    return _ndb_write_last_profile_fetch(ndb, pubkey, fetched_at);
  }

  late final _ndb_write_last_profile_fetchPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<Ndb>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Uint64,
      )
    >
  >('ndb_write_last_profile_fetch');
  late final _ndb_write_last_profile_fetch =
      _ndb_write_last_profile_fetchPtr
          .asFunction<
            int Function(ffi.Pointer<Ndb>, ffi.Pointer<ffi.UnsignedChar>, int)
          >();

  int ndb_read_last_profile_fetch(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ffi.UnsignedChar> pubkey,
  ) {
    return _ndb_read_last_profile_fetch(txn, pubkey);
  }

  late final _ndb_read_last_profile_fetchPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint64 Function(ffi.Pointer<ndb_txn>, ffi.Pointer<ffi.UnsignedChar>)
    >
  >('ndb_read_last_profile_fetch');
  late final _ndb_read_last_profile_fetch =
      _ndb_read_last_profile_fetchPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_txn>, ffi.Pointer<ffi.UnsignedChar>)
          >();

  ffi.Pointer<ffi.Void> ndb_get_profile_by_pubkey(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ffi.UnsignedChar> pubkey,
    ffi.Pointer<ffi.Size> len,
    ffi.Pointer<ffi.Uint64> primkey,
  ) {
    return _ndb_get_profile_by_pubkey(txn, pubkey, len, primkey);
  }

  late final _ndb_get_profile_by_pubkeyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ndb_txn>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Pointer<ffi.Size>,
        ffi.Pointer<ffi.Uint64>,
      )
    >
  >('ndb_get_profile_by_pubkey');
  late final _ndb_get_profile_by_pubkey =
      _ndb_get_profile_by_pubkeyPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ndb_txn>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint64>,
            )
          >();

  ffi.Pointer<ffi.Void> ndb_get_profile_by_key(
    ffi.Pointer<ndb_txn> txn,
    int key,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _ndb_get_profile_by_key(txn, key, len);
  }

  late final _ndb_get_profile_by_keyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ndb_txn>,
        ffi.Uint64,
        ffi.Pointer<ffi.Size>,
      )
    >
  >('ndb_get_profile_by_key');
  late final _ndb_get_profile_by_key =
      _ndb_get_profile_by_keyPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ndb_txn>,
              int,
              ffi.Pointer<ffi.Size>,
            )
          >();

  int ndb_get_notekey_by_id(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ffi.UnsignedChar> id,
  ) {
    return _ndb_get_notekey_by_id(txn, id);
  }

  late final _ndb_get_notekey_by_idPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint64 Function(ffi.Pointer<ndb_txn>, ffi.Pointer<ffi.UnsignedChar>)
    >
  >('ndb_get_notekey_by_id');
  late final _ndb_get_notekey_by_id =
      _ndb_get_notekey_by_idPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_txn>, ffi.Pointer<ffi.UnsignedChar>)
          >();

  int ndb_get_profilekey_by_pubkey(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ffi.UnsignedChar> id,
  ) {
    return _ndb_get_profilekey_by_pubkey(txn, id);
  }

  late final _ndb_get_profilekey_by_pubkeyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint64 Function(ffi.Pointer<ndb_txn>, ffi.Pointer<ffi.UnsignedChar>)
    >
  >('ndb_get_profilekey_by_pubkey');
  late final _ndb_get_profilekey_by_pubkey =
      _ndb_get_profilekey_by_pubkeyPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_txn>, ffi.Pointer<ffi.UnsignedChar>)
          >();

  ffi.Pointer<NdbNote> ndb_get_note_by_id(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ffi.UnsignedChar> id,
    ffi.Pointer<ffi.Size> len,
    ffi.Pointer<ffi.Uint64> primkey,
  ) {
    return _ndb_get_note_by_id(txn, id, len, primkey);
  }

  late final _ndb_get_note_by_idPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<NdbNote> Function(
        ffi.Pointer<ndb_txn>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Pointer<ffi.Size>,
        ffi.Pointer<ffi.Uint64>,
      )
    >
  >('ndb_get_note_by_id');
  late final _ndb_get_note_by_id =
      _ndb_get_note_by_idPtr
          .asFunction<
            ffi.Pointer<NdbNote> Function(
              ffi.Pointer<ndb_txn>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint64>,
            )
          >();

  ffi.Pointer<NdbNote> ndb_get_note_by_key(
    ffi.Pointer<ndb_txn> txn,
    int key,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _ndb_get_note_by_key(txn, key, len);
  }

  late final _ndb_get_note_by_keyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<NdbNote> Function(
        ffi.Pointer<ndb_txn>,
        ffi.Uint64,
        ffi.Pointer<ffi.Size>,
      )
    >
  >('ndb_get_note_by_key');
  late final _ndb_get_note_by_key =
      _ndb_get_note_by_keyPtr
          .asFunction<
            ffi.Pointer<NdbNote> Function(
              ffi.Pointer<ndb_txn>,
              int,
              ffi.Pointer<ffi.Size>,
            )
          >();

  ffi.Pointer<ffi.Void> ndb_get_note_meta(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ffi.UnsignedChar> id,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _ndb_get_note_meta(txn, id, len);
  }

  late final _ndb_get_note_metaPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ndb_txn>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Pointer<ffi.Size>,
      )
    >
  >('ndb_get_note_meta');
  late final _ndb_get_note_meta =
      _ndb_get_note_metaPtr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ndb_txn>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
            )
          >();

  int ndb_note_seen_on_relay(
    ffi.Pointer<ndb_txn> txn,
    int note_key,
    ffi.Pointer<ffi.Char> relay,
  ) {
    return _ndb_note_seen_on_relay(txn, note_key, relay);
  }

  late final _ndb_note_seen_on_relayPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_txn>, ffi.Uint64, ffi.Pointer<ffi.Char>)
    >
  >('ndb_note_seen_on_relay');
  late final _ndb_note_seen_on_relay =
      _ndb_note_seen_on_relayPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_txn>, int, ffi.Pointer<ffi.Char>)
          >();

  void ndb_destroy(ffi.Pointer<Ndb> arg0) {
    return _ndb_destroy(arg0);
  }

  late final _ndb_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Ndb>)>>(
        'ndb_destroy',
      );
  late final _ndb_destroy =
      _ndb_destroyPtr.asFunction<void Function(ffi.Pointer<Ndb>)>();

  /// BUILDER
  int ndb_parse_json_note(
    ffi.Pointer<ndb_json_parser> arg0,
    ffi.Pointer<ffi.Pointer<NdbNote>> arg1,
  ) {
    return _ndb_parse_json_note(arg0, arg1);
  }

  late final _ndb_parse_json_notePtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ndb_json_parser>,
        ffi.Pointer<ffi.Pointer<NdbNote>>,
      )
    >
  >('ndb_parse_json_note');
  late final _ndb_parse_json_note =
      _ndb_parse_json_notePtr
          .asFunction<
            int Function(
              ffi.Pointer<ndb_json_parser>,
              ffi.Pointer<ffi.Pointer<NdbNote>>,
            )
          >();

  int ndb_client_event_from_json(
    ffi.Pointer<ffi.Char> json,
    int len,
    ffi.Pointer<ndb_fce> fce,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int bufsize,
    ffi.Pointer<ndb_id_cb> cb,
  ) {
    return _ndb_client_event_from_json(json, len, fce, buf, bufsize, cb);
  }

  late final _ndb_client_event_from_jsonPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ndb_fce>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
        ffi.Pointer<ndb_id_cb>,
      )
    >
  >('ndb_client_event_from_json');
  late final _ndb_client_event_from_json =
      _ndb_client_event_from_jsonPtr
          .asFunction<
            int Function(
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ndb_fce>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ndb_id_cb>,
            )
          >();

  int ndb_ws_event_from_json(
    ffi.Pointer<ffi.Char> json,
    int len,
    ffi.Pointer<ndb_tce> tce,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int bufsize,
    ffi.Pointer<ndb_id_cb> arg5,
  ) {
    return _ndb_ws_event_from_json(json, len, tce, buf, bufsize, arg5);
  }

  late final _ndb_ws_event_from_jsonPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ndb_tce>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
        ffi.Pointer<ndb_id_cb>,
      )
    >
  >('ndb_ws_event_from_json');
  late final _ndb_ws_event_from_json =
      _ndb_ws_event_from_jsonPtr
          .asFunction<
            int Function(
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ndb_tce>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ndb_id_cb>,
            )
          >();

  int ndb_note_from_json(
    ffi.Pointer<ffi.Char> json,
    int len,
    ffi.Pointer<ffi.Pointer<NdbNote>> arg2,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int buflen,
  ) {
    return _ndb_note_from_json(json, len, arg2, buf, buflen);
  }

  late final _ndb_note_from_jsonPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ffi.Pointer<NdbNote>>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
      )
    >
  >('ndb_note_from_json');
  late final _ndb_note_from_json =
      _ndb_note_from_jsonPtr
          .asFunction<
            int Function(
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Pointer<NdbNote>>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
            )
          >();

  int ndb_builder_init(
    ffi.Pointer<ndb_builder> builder,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int bufsize,
  ) {
    return _ndb_builder_init(builder, buf, bufsize);
  }

  late final _ndb_builder_initPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ndb_builder>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Size,
      )
    >
  >('ndb_builder_init');
  late final _ndb_builder_init =
      _ndb_builder_initPtr
          .asFunction<
            int Function(
              ffi.Pointer<ndb_builder>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
            )
          >();

  int ndb_builder_finalize(
    ffi.Pointer<ndb_builder> builder,
    ffi.Pointer<ffi.Pointer<NdbNote>> note,
    ffi.Pointer<ndb_keypair> privkey,
  ) {
    return _ndb_builder_finalize(builder, note, privkey);
  }

  late final _ndb_builder_finalizePtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ndb_builder>,
        ffi.Pointer<ffi.Pointer<NdbNote>>,
        ffi.Pointer<ndb_keypair>,
      )
    >
  >('ndb_builder_finalize');
  late final _ndb_builder_finalize =
      _ndb_builder_finalizePtr
          .asFunction<
            int Function(
              ffi.Pointer<ndb_builder>,
              ffi.Pointer<ffi.Pointer<NdbNote>>,
              ffi.Pointer<ndb_keypair>,
            )
          >();

  int ndb_builder_set_content(
    ffi.Pointer<ndb_builder> builder,
    ffi.Pointer<ffi.Char> content,
    int len,
  ) {
    return _ndb_builder_set_content(builder, content, len);
  }

  late final _ndb_builder_set_contentPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_builder>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >('ndb_builder_set_content');
  late final _ndb_builder_set_content =
      _ndb_builder_set_contentPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_builder>, ffi.Pointer<ffi.Char>, int)
          >();

  void ndb_builder_set_created_at(
    ffi.Pointer<ndb_builder> builder,
    int created_at,
  ) {
    return _ndb_builder_set_created_at(builder, created_at);
  }

  late final _ndb_builder_set_created_atPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndb_builder>, ffi.Uint64)>
  >('ndb_builder_set_created_at');
  late final _ndb_builder_set_created_at =
      _ndb_builder_set_created_atPtr
          .asFunction<void Function(ffi.Pointer<ndb_builder>, int)>();

  void ndb_builder_set_sig(
    ffi.Pointer<ndb_builder> builder,
    ffi.Pointer<ffi.UnsignedChar> sig,
  ) {
    return _ndb_builder_set_sig(builder, sig);
  }

  late final _ndb_builder_set_sigPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<ndb_builder>, ffi.Pointer<ffi.UnsignedChar>)
    >
  >('ndb_builder_set_sig');
  late final _ndb_builder_set_sig =
      _ndb_builder_set_sigPtr
          .asFunction<
            void Function(
              ffi.Pointer<ndb_builder>,
              ffi.Pointer<ffi.UnsignedChar>,
            )
          >();

  void ndb_builder_set_pubkey(
    ffi.Pointer<ndb_builder> builder,
    ffi.Pointer<ffi.UnsignedChar> pubkey,
  ) {
    return _ndb_builder_set_pubkey(builder, pubkey);
  }

  late final _ndb_builder_set_pubkeyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<ndb_builder>, ffi.Pointer<ffi.UnsignedChar>)
    >
  >('ndb_builder_set_pubkey');
  late final _ndb_builder_set_pubkey =
      _ndb_builder_set_pubkeyPtr
          .asFunction<
            void Function(
              ffi.Pointer<ndb_builder>,
              ffi.Pointer<ffi.UnsignedChar>,
            )
          >();

  void ndb_builder_set_id(
    ffi.Pointer<ndb_builder> builder,
    ffi.Pointer<ffi.UnsignedChar> id,
  ) {
    return _ndb_builder_set_id(builder, id);
  }

  late final _ndb_builder_set_idPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<ndb_builder>, ffi.Pointer<ffi.UnsignedChar>)
    >
  >('ndb_builder_set_id');
  late final _ndb_builder_set_id =
      _ndb_builder_set_idPtr
          .asFunction<
            void Function(
              ffi.Pointer<ndb_builder>,
              ffi.Pointer<ffi.UnsignedChar>,
            )
          >();

  void ndb_builder_set_kind(ffi.Pointer<ndb_builder> builder, int kind) {
    return _ndb_builder_set_kind(builder, kind);
  }

  late final _ndb_builder_set_kindPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndb_builder>, ffi.Uint32)>
  >('ndb_builder_set_kind');
  late final _ndb_builder_set_kind =
      _ndb_builder_set_kindPtr
          .asFunction<void Function(ffi.Pointer<ndb_builder>, int)>();

  int ndb_builder_new_tag(ffi.Pointer<ndb_builder> builder) {
    return _ndb_builder_new_tag(builder);
  }

  late final _ndb_builder_new_tagPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_builder>)>>(
        'ndb_builder_new_tag',
      );
  late final _ndb_builder_new_tag =
      _ndb_builder_new_tagPtr
          .asFunction<int Function(ffi.Pointer<ndb_builder>)>();

  int ndb_builder_push_tag_str(
    ffi.Pointer<ndb_builder> builder,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _ndb_builder_push_tag_str(builder, str, len);
  }

  late final _ndb_builder_push_tag_strPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_builder>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >('ndb_builder_push_tag_str');
  late final _ndb_builder_push_tag_str =
      _ndb_builder_push_tag_strPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_builder>, ffi.Pointer<ffi.Char>, int)
          >();

  /// FILTERS
  int ndb_filter_init(ffi.Pointer<ndb_filter> arg0) {
    return _ndb_filter_init(arg0);
  }

  late final _ndb_filter_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_filter>)>>(
        'ndb_filter_init',
      );
  late final _ndb_filter_init =
      _ndb_filter_initPtr.asFunction<int Function(ffi.Pointer<ndb_filter>)>();

  /// Allocate a filter with a fixed sized buffer (where pages is number of 4096-byte sized blocks)
  /// You can set pages to 1 if you know you are constructing small filters
  /// TODO: replace this with passed-in buffers
  int ndb_filter_init_with(ffi.Pointer<ndb_filter> filter, int pages) {
    return _ndb_filter_init_with(filter, pages);
  }

  late final _ndb_filter_init_withPtr = _lookup<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Int)>
  >('ndb_filter_init_with');
  late final _ndb_filter_init_with =
      _ndb_filter_init_withPtr
          .asFunction<int Function(ffi.Pointer<ndb_filter>, int)>();

  int ndb_filter_add_id_element(
    ffi.Pointer<ndb_filter> arg0,
    ffi.Pointer<ffi.UnsignedChar> id,
  ) {
    return _ndb_filter_add_id_element(arg0, id);
  }

  late final _ndb_filter_add_id_elementPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ffi.UnsignedChar>)
    >
  >('ndb_filter_add_id_element');
  late final _ndb_filter_add_id_element =
      _ndb_filter_add_id_elementPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ffi.UnsignedChar>)
          >();

  int ndb_filter_add_int_element(ffi.Pointer<ndb_filter> arg0, int integer) {
    return _ndb_filter_add_int_element(arg0, integer);
  }

  late final _ndb_filter_add_int_elementPtr = _lookup<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Uint64)>
  >('ndb_filter_add_int_element');
  late final _ndb_filter_add_int_element =
      _ndb_filter_add_int_elementPtr
          .asFunction<int Function(ffi.Pointer<ndb_filter>, int)>();

  int ndb_filter_add_str_element(
    ffi.Pointer<ndb_filter> arg0,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ndb_filter_add_str_element(arg0, str);
  }

  late final _ndb_filter_add_str_elementPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ffi.Char>)
    >
  >('ndb_filter_add_str_element');
  late final _ndb_filter_add_str_element =
      _ndb_filter_add_str_elementPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ffi.Char>)
          >();

  int ndb_filter_eq(
    ffi.Pointer<ndb_filter> arg0,
    ffi.Pointer<ndb_filter> arg1,
  ) {
    return _ndb_filter_eq(arg0, arg1);
  }

  late final _ndb_filter_eqPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ndb_filter>)
    >
  >('ndb_filter_eq');
  late final _ndb_filter_eq =
      _ndb_filter_eqPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ndb_filter>)
          >();

  /// is `a` a subset of `b`
  int ndb_filter_is_subset_of(
    ffi.Pointer<ndb_filter> a,
    ffi.Pointer<ndb_filter> b,
  ) {
    return _ndb_filter_is_subset_of(a, b);
  }

  late final _ndb_filter_is_subset_ofPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ndb_filter>)
    >
  >('ndb_filter_is_subset_of');
  late final _ndb_filter_is_subset_of =
      _ndb_filter_is_subset_ofPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ndb_filter>)
          >();

  /// filters from json
  int ndb_filter_from_json(
    ffi.Pointer<ffi.Char> arg0,
    int len,
    ffi.Pointer<ndb_filter> filter,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int bufsize,
  ) {
    return _ndb_filter_from_json(arg0, len, filter, buf, bufsize);
  }

  late final _ndb_filter_from_jsonPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ndb_filter>,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
      )
    >
  >('ndb_filter_from_json');
  late final _ndb_filter_from_json =
      _ndb_filter_from_jsonPtr
          .asFunction<
            int Function(
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ndb_filter>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
            )
          >();

  /// getting field elements
  ffi.Pointer<ffi.UnsignedChar> ndb_filter_get_id_element(
    ffi.Pointer<ndb_filter> arg0,
    ffi.Pointer<ndb_filter_elements> arg1,
    int index,
  ) {
    return _ndb_filter_get_id_element(arg0, arg1, index);
  }

  late final _ndb_filter_get_id_elementPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
        ffi.Pointer<ndb_filter>,
        ffi.Pointer<ndb_filter_elements>,
        ffi.Int,
      )
    >
  >('ndb_filter_get_id_element');
  late final _ndb_filter_get_id_element =
      _ndb_filter_get_id_elementPtr
          .asFunction<
            ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ndb_filter>,
              ffi.Pointer<ndb_filter_elements>,
              int,
            )
          >();

  ffi.Pointer<ffi.Char> ndb_filter_get_string_element(
    ffi.Pointer<ndb_filter> arg0,
    ffi.Pointer<ndb_filter_elements> arg1,
    int index,
  ) {
    return _ndb_filter_get_string_element(arg0, arg1, index);
  }

  late final _ndb_filter_get_string_elementPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ndb_filter>,
        ffi.Pointer<ndb_filter_elements>,
        ffi.Int,
      )
    >
  >('ndb_filter_get_string_element');
  late final _ndb_filter_get_string_element =
      _ndb_filter_get_string_elementPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ndb_filter>,
              ffi.Pointer<ndb_filter_elements>,
              int,
            )
          >();

  int ndb_filter_get_int_element(
    ffi.Pointer<ndb_filter_elements> arg0,
    int index,
  ) {
    return _ndb_filter_get_int_element(arg0, index);
  }

  late final _ndb_filter_get_int_elementPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint64 Function(ffi.Pointer<ndb_filter_elements>, ffi.Int)
    >
  >('ndb_filter_get_int_element');
  late final _ndb_filter_get_int_element =
      _ndb_filter_get_int_elementPtr
          .asFunction<int Function(ffi.Pointer<ndb_filter_elements>, int)>();

  ffi.Pointer<ffi.Uint64> ndb_filter_get_int_element_ptr(
    ffi.Pointer<ndb_filter_elements> arg0,
    int index,
  ) {
    return _ndb_filter_get_int_element_ptr(arg0, index);
  }

  late final _ndb_filter_get_int_element_ptrPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Uint64> Function(
        ffi.Pointer<ndb_filter_elements>,
        ffi.Int,
      )
    >
  >('ndb_filter_get_int_element_ptr');
  late final _ndb_filter_get_int_element_ptr =
      _ndb_filter_get_int_element_ptrPtr
          .asFunction<
            ffi.Pointer<ffi.Uint64> Function(
              ffi.Pointer<ndb_filter_elements>,
              int,
            )
          >();

  ffi.Pointer<ndb_filter_elements> ndb_filter_current_element(
    ffi.Pointer<ndb_filter> arg0,
  ) {
    return _ndb_filter_current_element(arg0);
  }

  late final _ndb_filter_current_elementPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ndb_filter_elements> Function(ffi.Pointer<ndb_filter>)
    >
  >('ndb_filter_current_element');
  late final _ndb_filter_current_element =
      _ndb_filter_current_elementPtr
          .asFunction<
            ffi.Pointer<ndb_filter_elements> Function(ffi.Pointer<ndb_filter>)
          >();

  ffi.Pointer<ndb_filter_elements> ndb_filter_get_elements(
    ffi.Pointer<ndb_filter> arg0,
    int arg1,
  ) {
    return _ndb_filter_get_elements(arg0, arg1);
  }

  late final _ndb_filter_get_elementsPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ndb_filter_elements> Function(
        ffi.Pointer<ndb_filter>,
        ffi.Int,
      )
    >
  >('ndb_filter_get_elements');
  late final _ndb_filter_get_elements =
      _ndb_filter_get_elementsPtr
          .asFunction<
            ffi.Pointer<ndb_filter_elements> Function(
              ffi.Pointer<ndb_filter>,
              int,
            )
          >();

  int ndb_filter_start_field(
    ffi.Pointer<ndb_filter> arg0,
    ndb_filter_fieldtype arg1,
  ) {
    return _ndb_filter_start_field(arg0, arg1.value);
  }

  late final _ndb_filter_start_fieldPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.UnsignedInt)
    >
  >('ndb_filter_start_field');
  late final _ndb_filter_start_field =
      _ndb_filter_start_fieldPtr
          .asFunction<int Function(ffi.Pointer<ndb_filter>, int)>();

  int ndb_filter_start_tag_field(ffi.Pointer<ndb_filter> arg0, int tag) {
    return _ndb_filter_start_tag_field(arg0, tag);
  }

  late final _ndb_filter_start_tag_fieldPtr = _lookup<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Char)>
  >('ndb_filter_start_tag_field');
  late final _ndb_filter_start_tag_field =
      _ndb_filter_start_tag_fieldPtr
          .asFunction<int Function(ffi.Pointer<ndb_filter>, int)>();

  int ndb_filter_matches(
    ffi.Pointer<ndb_filter> arg0,
    ffi.Pointer<NdbNote> arg1,
  ) {
    return _ndb_filter_matches(arg0, arg1);
  }

  late final _ndb_filter_matchesPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<NdbNote>)
    >
  >('ndb_filter_matches');
  late final _ndb_filter_matches =
      _ndb_filter_matchesPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<NdbNote>)
          >();

  int ndb_filter_clone(
    ffi.Pointer<ndb_filter> dst,
    ffi.Pointer<ndb_filter> src,
  ) {
    return _ndb_filter_clone(dst, src);
  }

  late final _ndb_filter_clonePtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ndb_filter>)
    >
  >('ndb_filter_clone');
  late final _ndb_filter_clone =
      _ndb_filter_clonePtr
          .asFunction<
            int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ndb_filter>)
          >();

  int ndb_filter_end(ffi.Pointer<ndb_filter> arg0) {
    return _ndb_filter_end(arg0);
  }

  late final _ndb_filter_endPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_filter>)>>(
        'ndb_filter_end',
      );
  late final _ndb_filter_end =
      _ndb_filter_endPtr.asFunction<int Function(ffi.Pointer<ndb_filter>)>();

  void ndb_filter_end_field(ffi.Pointer<ndb_filter> arg0) {
    return _ndb_filter_end_field(arg0);
  }

  late final _ndb_filter_end_fieldPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndb_filter>)>>(
        'ndb_filter_end_field',
      );
  late final _ndb_filter_end_field =
      _ndb_filter_end_fieldPtr
          .asFunction<void Function(ffi.Pointer<ndb_filter>)>();

  void ndb_filter_destroy(ffi.Pointer<ndb_filter> arg0) {
    return _ndb_filter_destroy(arg0);
  }

  late final _ndb_filter_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndb_filter>)>>(
        'ndb_filter_destroy',
      );
  late final _ndb_filter_destroy =
      _ndb_filter_destroyPtr
          .asFunction<void Function(ffi.Pointer<ndb_filter>)>();

  int ndb_filter_json(
    ffi.Pointer<ndb_filter> arg0,
    ffi.Pointer<ffi.Char> buf,
    int buflen,
  ) {
    return _ndb_filter_json(arg0, buf, buflen);
  }

  late final _ndb_filter_jsonPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >('ndb_filter_json');
  late final _ndb_filter_json =
      _ndb_filter_jsonPtr
          .asFunction<
            int Function(ffi.Pointer<ndb_filter>, ffi.Pointer<ffi.Char>, int)
          >();

  /// SUBSCRIPTIONS
  int ndb_subscribe(
    ffi.Pointer<Ndb> arg0,
    ffi.Pointer<ndb_filter> arg1,
    int num_filters,
  ) {
    return _ndb_subscribe(arg0, arg1, num_filters);
  }

  late final _ndb_subscribePtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint64 Function(ffi.Pointer<Ndb>, ffi.Pointer<ndb_filter>, ffi.Int)
    >
  >('ndb_subscribe');
  late final _ndb_subscribe =
      _ndb_subscribePtr
          .asFunction<
            int Function(ffi.Pointer<Ndb>, ffi.Pointer<ndb_filter>, int)
          >();

  int ndb_wait_for_notes(
    ffi.Pointer<Ndb> arg0,
    int subid,
    ffi.Pointer<ffi.Uint64> note_ids,
    int note_id_capacity,
  ) {
    return _ndb_wait_for_notes(arg0, subid, note_ids, note_id_capacity);
  }

  late final _ndb_wait_for_notesPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<Ndb>,
        ffi.Uint64,
        ffi.Pointer<ffi.Uint64>,
        ffi.Int,
      )
    >
  >('ndb_wait_for_notes');
  late final _ndb_wait_for_notes =
      _ndb_wait_for_notesPtr
          .asFunction<
            int Function(ffi.Pointer<Ndb>, int, ffi.Pointer<ffi.Uint64>, int)
          >();

  int ndb_poll_for_notes(
    ffi.Pointer<Ndb> arg0,
    int subid,
    ffi.Pointer<ffi.Uint64> note_ids,
    int note_id_capacity,
  ) {
    return _ndb_poll_for_notes(arg0, subid, note_ids, note_id_capacity);
  }

  late final _ndb_poll_for_notesPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<Ndb>,
        ffi.Uint64,
        ffi.Pointer<ffi.Uint64>,
        ffi.Int,
      )
    >
  >('ndb_poll_for_notes');
  late final _ndb_poll_for_notes =
      _ndb_poll_for_notesPtr
          .asFunction<
            int Function(ffi.Pointer<Ndb>, int, ffi.Pointer<ffi.Uint64>, int)
          >();

  int ndb_unsubscribe(ffi.Pointer<Ndb> arg0, int subid) {
    return _ndb_unsubscribe(arg0, subid);
  }

  late final _ndb_unsubscribePtr = _lookup<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Ndb>, ffi.Uint64)>
  >('ndb_unsubscribe');
  late final _ndb_unsubscribe =
      _ndb_unsubscribePtr.asFunction<int Function(ffi.Pointer<Ndb>, int)>();

  int ndb_num_subscriptions(ffi.Pointer<Ndb> arg0) {
    return _ndb_num_subscriptions(arg0);
  }

  late final _ndb_num_subscriptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Ndb>)>>(
        'ndb_num_subscriptions',
      );
  late final _ndb_num_subscriptions =
      _ndb_num_subscriptionsPtr.asFunction<int Function(ffi.Pointer<Ndb>)>();

  /// FULLTEXT SEARCH
  int ndb_text_search(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<ndb_text_search_results> arg2,
    ffi.Pointer<ndb_text_search_config> arg3,
  ) {
    return _ndb_text_search(txn, query, arg2, arg3);
  }

  late final _ndb_text_searchPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ndb_txn>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ndb_text_search_results>,
        ffi.Pointer<ndb_text_search_config>,
      )
    >
  >('ndb_text_search');
  late final _ndb_text_search =
      _ndb_text_searchPtr
          .asFunction<
            int Function(
              ffi.Pointer<ndb_txn>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ndb_text_search_results>,
              ffi.Pointer<ndb_text_search_config>,
            )
          >();

  int ndb_text_search_with(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<ndb_text_search_results> arg2,
    ffi.Pointer<ndb_text_search_config> arg3,
    ffi.Pointer<ndb_filter> filter,
  ) {
    return _ndb_text_search_with(txn, query, arg2, arg3, filter);
  }

  late final _ndb_text_search_withPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ndb_txn>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ndb_text_search_results>,
        ffi.Pointer<ndb_text_search_config>,
        ffi.Pointer<ndb_filter>,
      )
    >
  >('ndb_text_search_with');
  late final _ndb_text_search_with =
      _ndb_text_search_withPtr
          .asFunction<
            int Function(
              ffi.Pointer<ndb_txn>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ndb_text_search_results>,
              ffi.Pointer<ndb_text_search_config>,
              ffi.Pointer<ndb_filter>,
            )
          >();

  void ndb_default_text_search_config(
    ffi.Pointer<ndb_text_search_config> arg0,
  ) {
    return _ndb_default_text_search_config(arg0);
  }

  late final _ndb_default_text_search_configPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndb_text_search_config>)>
  >('ndb_default_text_search_config');
  late final _ndb_default_text_search_config =
      _ndb_default_text_search_configPtr
          .asFunction<void Function(ffi.Pointer<ndb_text_search_config>)>();

  void ndb_text_search_config_set_order(
    ffi.Pointer<ndb_text_search_config> arg0,
    ndb_search_order arg1,
  ) {
    return _ndb_text_search_config_set_order(arg0, arg1.value);
  }

  late final _ndb_text_search_config_set_orderPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<ndb_text_search_config>, ffi.UnsignedInt)
    >
  >('ndb_text_search_config_set_order');
  late final _ndb_text_search_config_set_order =
      _ndb_text_search_config_set_orderPtr
          .asFunction<
            void Function(ffi.Pointer<ndb_text_search_config>, int)
          >();

  void ndb_text_search_config_set_limit(
    ffi.Pointer<ndb_text_search_config> arg0,
    int limit,
  ) {
    return _ndb_text_search_config_set_limit(arg0, limit);
  }

  late final _ndb_text_search_config_set_limitPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<ndb_text_search_config>, ffi.Int)
    >
  >('ndb_text_search_config_set_limit');
  late final _ndb_text_search_config_set_limit =
      _ndb_text_search_config_set_limitPtr
          .asFunction<
            void Function(ffi.Pointer<ndb_text_search_config>, int)
          >();

  /// QUERY
  int ndb_query(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ndb_filter> filters,
    int num_filters,
    ffi.Pointer<ndb_query_result> results,
    int result_capacity,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _ndb_query(
      txn,
      filters,
      num_filters,
      results,
      result_capacity,
      count,
    );
  }

  late final _ndb_queryPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ndb_txn>,
        ffi.Pointer<ndb_filter>,
        ffi.Int,
        ffi.Pointer<ndb_query_result>,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
      )
    >
  >('ndb_query');
  late final _ndb_query =
      _ndb_queryPtr
          .asFunction<
            int Function(
              ffi.Pointer<ndb_txn>,
              ffi.Pointer<ndb_filter>,
              int,
              ffi.Pointer<ndb_query_result>,
              int,
              ffi.Pointer<ffi.Int>,
            )
          >();

  /// STATS
  int ndb_stat(ffi.Pointer<Ndb> ndb, ffi.Pointer<NdbStat> stat) {
    return _ndb_stat(ndb, stat);
  }

  late final _ndb_statPtr = _lookup<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Ndb>, ffi.Pointer<NdbStat>)>
  >('ndb_stat');
  late final _ndb_stat =
      _ndb_statPtr
          .asFunction<int Function(ffi.Pointer<Ndb>, ffi.Pointer<NdbStat>)>();

  void ndb_stat_counts_init(ffi.Pointer<ndb_stat_counts> counts) {
    return _ndb_stat_counts_init(counts);
  }

  late final _ndb_stat_counts_initPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndb_stat_counts>)>
  >('ndb_stat_counts_init');
  late final _ndb_stat_counts_init =
      _ndb_stat_counts_initPtr
          .asFunction<void Function(ffi.Pointer<ndb_stat_counts>)>();

  /// NOTE
  ffi.Pointer<ffi.Char> ndb_note_content(ffi.Pointer<NdbNote> note) {
    return _ndb_note_content(note);
  }

  late final _ndb_note_contentPtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<NdbNote>)>
  >('ndb_note_content');
  late final _ndb_note_content =
      _ndb_note_contentPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<NdbNote>)>();

  ndb_str ndb_note_str(
    ffi.Pointer<NdbNote> note,
    ffi.Pointer<ndb_packed_str> pstr,
  ) {
    return _ndb_note_str(note, pstr);
  }

  late final _ndb_note_strPtr = _lookup<
    ffi.NativeFunction<
      ndb_str Function(ffi.Pointer<NdbNote>, ffi.Pointer<ndb_packed_str>)
    >
  >('ndb_note_str');
  late final _ndb_note_str =
      _ndb_note_strPtr
          .asFunction<
            ndb_str Function(ffi.Pointer<NdbNote>, ffi.Pointer<ndb_packed_str>)
          >();

  int ndb_note_content_length(ffi.Pointer<NdbNote> note) {
    return _ndb_note_content_length(note);
  }

  late final _ndb_note_content_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<NdbNote>)>>(
        'ndb_note_content_length',
      );
  late final _ndb_note_content_length =
      _ndb_note_content_lengthPtr
          .asFunction<int Function(ffi.Pointer<NdbNote>)>();

  int ndb_note_created_at(ffi.Pointer<NdbNote> note) {
    return _ndb_note_created_at(note);
  }

  late final _ndb_note_created_atPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<NdbNote>)>>(
        'ndb_note_created_at',
      );
  late final _ndb_note_created_at =
      _ndb_note_created_atPtr.asFunction<int Function(ffi.Pointer<NdbNote>)>();

  int ndb_note_kind(ffi.Pointer<NdbNote> note) {
    return _ndb_note_kind(note);
  }

  late final _ndb_note_kindPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<NdbNote>)>>(
        'ndb_note_kind',
      );
  late final _ndb_note_kind =
      _ndb_note_kindPtr.asFunction<int Function(ffi.Pointer<NdbNote>)>();

  ffi.Pointer<ffi.UnsignedChar> ndb_note_id(ffi.Pointer<NdbNote> note) {
    return _ndb_note_id(note);
  }

  late final _ndb_note_idPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<NdbNote>)
    >
  >('ndb_note_id');
  late final _ndb_note_id =
      _ndb_note_idPtr
          .asFunction<
            ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<NdbNote>)
          >();

  ffi.Pointer<ffi.UnsignedChar> ndb_note_pubkey(ffi.Pointer<NdbNote> note) {
    return _ndb_note_pubkey(note);
  }

  late final _ndb_note_pubkeyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<NdbNote>)
    >
  >('ndb_note_pubkey');
  late final _ndb_note_pubkey =
      _ndb_note_pubkeyPtr
          .asFunction<
            ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<NdbNote>)
          >();

  ffi.Pointer<ffi.UnsignedChar> ndb_note_sig(ffi.Pointer<NdbNote> note) {
    return _ndb_note_sig(note);
  }

  late final _ndb_note_sigPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<NdbNote>)
    >
  >('ndb_note_sig');
  late final _ndb_note_sig =
      _ndb_note_sigPtr
          .asFunction<
            ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<NdbNote>)
          >();

  void _ndb_note_set_kind(ffi.Pointer<NdbNote> note, int kind) {
    return __ndb_note_set_kind(note, kind);
  }

  late final __ndb_note_set_kindPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NdbNote>, ffi.Uint32)>
  >('_ndb_note_set_kind');
  late final __ndb_note_set_kind =
      __ndb_note_set_kindPtr
          .asFunction<void Function(ffi.Pointer<NdbNote>, int)>();

  ffi.Pointer<ndb_tags> ndb_note_tags(ffi.Pointer<NdbNote> note) {
    return _ndb_note_tags(note);
  }

  late final _ndb_note_tagsPtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<ndb_tags> Function(ffi.Pointer<NdbNote>)>
  >('ndb_note_tags');
  late final _ndb_note_tags =
      _ndb_note_tagsPtr
          .asFunction<ffi.Pointer<ndb_tags> Function(ffi.Pointer<NdbNote>)>();

  int ndb_str_len(ffi.Pointer<ndb_str> str) {
    return _ndb_str_len(str);
  }

  late final _ndb_str_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_str>)>>(
        'ndb_str_len',
      );
  late final _ndb_str_len =
      _ndb_str_lenPtr.asFunction<int Function(ffi.Pointer<ndb_str>)>();

  /// write the note as json to a buffer
  int ndb_note_json(
    ffi.Pointer<NdbNote> arg0,
    ffi.Pointer<ffi.Char> buf,
    int buflen,
  ) {
    return _ndb_note_json(arg0, buf, buflen);
  }

  late final _ndb_note_jsonPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<NdbNote>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >('ndb_note_json');
  late final _ndb_note_json =
      _ndb_note_jsonPtr
          .asFunction<
            int Function(ffi.Pointer<NdbNote>, ffi.Pointer<ffi.Char>, int)
          >();

  /// TAGS
  void ndb_tags_iterate_start(
    ffi.Pointer<NdbNote> note,
    ffi.Pointer<ndb_iterator> iter,
  ) {
    return _ndb_tags_iterate_start(note, iter);
  }

  late final _ndb_tags_iterate_startPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<NdbNote>, ffi.Pointer<ndb_iterator>)
    >
  >('ndb_tags_iterate_start');
  late final _ndb_tags_iterate_start =
      _ndb_tags_iterate_startPtr
          .asFunction<
            void Function(ffi.Pointer<NdbNote>, ffi.Pointer<ndb_iterator>)
          >();

  int ndb_tags_count(ffi.Pointer<ndb_tags> arg0) {
    return _ndb_tags_count(arg0);
  }

  late final _ndb_tags_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<ndb_tags>)>>(
        'ndb_tags_count',
      );
  late final _ndb_tags_count =
      _ndb_tags_countPtr.asFunction<int Function(ffi.Pointer<ndb_tags>)>();

  int ndb_tag_count(ffi.Pointer<ndb_tag> arg0) {
    return _ndb_tag_count(arg0);
  }

  late final _ndb_tag_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<ndb_tag>)>>(
        'ndb_tag_count',
      );
  late final _ndb_tag_count =
      _ndb_tag_countPtr.asFunction<int Function(ffi.Pointer<ndb_tag>)>();

  /// ITER
  int ndb_tags_iterate_next(ffi.Pointer<ndb_iterator> iter) {
    return _ndb_tags_iterate_next(iter);
  }

  late final _ndb_tags_iterate_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_iterator>)>>(
        'ndb_tags_iterate_next',
      );
  late final _ndb_tags_iterate_next =
      _ndb_tags_iterate_nextPtr
          .asFunction<int Function(ffi.Pointer<ndb_iterator>)>();

  ndb_str ndb_iter_tag_str(ffi.Pointer<ndb_iterator> iter, int ind) {
    return _ndb_iter_tag_str(iter, ind);
  }

  late final _ndb_iter_tag_strPtr = _lookup<
    ffi.NativeFunction<ndb_str Function(ffi.Pointer<ndb_iterator>, ffi.Int)>
  >('ndb_iter_tag_str');
  late final _ndb_iter_tag_str =
      _ndb_iter_tag_strPtr
          .asFunction<ndb_str Function(ffi.Pointer<ndb_iterator>, int)>();

  ndb_str ndb_tag_str(
    ffi.Pointer<NdbNote> note,
    ffi.Pointer<ndb_tag> tag,
    int ind,
  ) {
    return _ndb_tag_str(note, tag, ind);
  }

  late final _ndb_tag_strPtr = _lookup<
    ffi.NativeFunction<
      ndb_str Function(ffi.Pointer<NdbNote>, ffi.Pointer<ndb_tag>, ffi.Int)
    >
  >('ndb_tag_str');
  late final _ndb_tag_str =
      _ndb_tag_strPtr
          .asFunction<
            ndb_str Function(ffi.Pointer<NdbNote>, ffi.Pointer<ndb_tag>, int)
          >();

  /// RELAY ITER
  int ndb_note_relay_iterate_start(
    ffi.Pointer<ndb_txn> txn,
    ffi.Pointer<ndb_note_relay_iterator> iter,
    int note_key,
  ) {
    return _ndb_note_relay_iterate_start(txn, iter, note_key);
  }

  late final _ndb_note_relay_iterate_startPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ndb_txn>,
        ffi.Pointer<ndb_note_relay_iterator>,
        ffi.Uint64,
      )
    >
  >('ndb_note_relay_iterate_start');
  late final _ndb_note_relay_iterate_start =
      _ndb_note_relay_iterate_startPtr
          .asFunction<
            int Function(
              ffi.Pointer<ndb_txn>,
              ffi.Pointer<ndb_note_relay_iterator>,
              int,
            )
          >();

  ffi.Pointer<ffi.Char> ndb_note_relay_iterate_next(
    ffi.Pointer<ndb_note_relay_iterator> iter,
  ) {
    return _ndb_note_relay_iterate_next(iter);
  }

  late final _ndb_note_relay_iterate_nextPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ndb_note_relay_iterator>)
    >
  >('ndb_note_relay_iterate_next');
  late final _ndb_note_relay_iterate_next =
      _ndb_note_relay_iterate_nextPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<ndb_note_relay_iterator>)
          >();

  void ndb_note_relay_iterate_close(ffi.Pointer<ndb_note_relay_iterator> iter) {
    return _ndb_note_relay_iterate_close(iter);
  }

  late final _ndb_note_relay_iterate_closePtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndb_note_relay_iterator>)>
  >('ndb_note_relay_iterate_close');
  late final _ndb_note_relay_iterate_close =
      _ndb_note_relay_iterate_closePtr
          .asFunction<void Function(ffi.Pointer<ndb_note_relay_iterator>)>();

  /// NAMES
  ffi.Pointer<ffi.Char> ndb_db_name(ndb_dbs db) {
    return _ndb_db_name(db.value);
  }

  late final _ndb_db_namePtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>
  >('ndb_db_name');
  late final _ndb_db_name =
      _ndb_db_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ndb_kind_name(ndb_common_kind ck) {
    return _ndb_kind_name(ck.value);
  }

  late final _ndb_kind_namePtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>
  >('ndb_kind_name');
  late final _ndb_kind_name =
      _ndb_kind_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ndb_common_kind ndb_kind_to_common_kind(int kind) {
    return ndb_common_kind.fromValue(_ndb_kind_to_common_kind(kind));
  }

  late final _ndb_kind_to_common_kindPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Int)>>(
        'ndb_kind_to_common_kind',
      );
  late final _ndb_kind_to_common_kind =
      _ndb_kind_to_common_kindPtr.asFunction<int Function(int)>();

  /// CONTENT PARSER
  int ndb_parse_content(
    ffi.Pointer<ffi.UnsignedChar> buf,
    int buf_size,
    ffi.Pointer<ffi.Char> content,
    int content_len,
    ffi.Pointer<ffi.Pointer<ndb_blocks>> blocks_p,
  ) {
    return _ndb_parse_content(buf, buf_size, content, content_len, blocks_p);
  }

  late final _ndb_parse_contentPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ffi.Pointer<ndb_blocks>>,
      )
    >
  >('ndb_parse_content');
  late final _ndb_parse_content =
      _ndb_parse_contentPtr
          .asFunction<
            int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Pointer<ndb_blocks>>,
            )
          >();

  /// BLOCKS
  ndb_block_type ndb_get_block_type(ffi.Pointer<ndb_block> block) {
    return ndb_block_type.fromValue(_ndb_get_block_type(block));
  }

  late final _ndb_get_block_typePtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ndb_block>)>
  >('ndb_get_block_type');
  late final _ndb_get_block_type =
      _ndb_get_block_typePtr.asFunction<int Function(ffi.Pointer<ndb_block>)>();

  int ndb_blocks_flags(ffi.Pointer<ndb_blocks> block) {
    return _ndb_blocks_flags(block);
  }

  late final _ndb_blocks_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_blocks>)>>(
        'ndb_blocks_flags',
      );
  late final _ndb_blocks_flags =
      _ndb_blocks_flagsPtr.asFunction<int Function(ffi.Pointer<ndb_blocks>)>();

  int ndb_blocks_total_size(ffi.Pointer<ndb_blocks> blocks) {
    return _ndb_blocks_total_size(blocks);
  }

  late final _ndb_blocks_total_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ndb_blocks>)>>(
        'ndb_blocks_total_size',
      );
  late final _ndb_blocks_total_size =
      _ndb_blocks_total_sizePtr
          .asFunction<int Function(ffi.Pointer<ndb_blocks>)>();

  int ndb_blocks_word_count(ffi.Pointer<ndb_blocks> blocks) {
    return _ndb_blocks_word_count(blocks);
  }

  late final _ndb_blocks_word_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ndb_blocks>)>>(
        'ndb_blocks_word_count',
      );
  late final _ndb_blocks_word_count =
      _ndb_blocks_word_countPtr
          .asFunction<int Function(ffi.Pointer<ndb_blocks>)>();

  /// Free blocks if they are owned, safe to call on unowned blocks as well.
  void ndb_blocks_free(ffi.Pointer<ndb_blocks> blocks) {
    return _ndb_blocks_free(blocks);
  }

  late final _ndb_blocks_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndb_blocks>)>>(
        'ndb_blocks_free',
      );
  late final _ndb_blocks_free =
      _ndb_blocks_freePtr.asFunction<void Function(ffi.Pointer<ndb_blocks>)>();

  /// BLOCK DB
  ffi.Pointer<ndb_blocks> ndb_get_blocks_by_key(
    ffi.Pointer<Ndb> ndb,
    ffi.Pointer<ndb_txn> txn,
    int note_key,
  ) {
    return _ndb_get_blocks_by_key(ndb, txn, note_key);
  }

  late final _ndb_get_blocks_by_keyPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ndb_blocks> Function(
        ffi.Pointer<Ndb>,
        ffi.Pointer<ndb_txn>,
        ffi.Uint64,
      )
    >
  >('ndb_get_blocks_by_key');
  late final _ndb_get_blocks_by_key =
      _ndb_get_blocks_by_keyPtr
          .asFunction<
            ffi.Pointer<ndb_blocks> Function(
              ffi.Pointer<Ndb>,
              ffi.Pointer<ndb_txn>,
              int,
            )
          >();

  /// BLOCK ITERATORS
  void ndb_blocks_iterate_start(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ndb_blocks> arg1,
    ffi.Pointer<ndb_block_iterator> arg2,
  ) {
    return _ndb_blocks_iterate_start(arg0, arg1, arg2);
  }

  late final _ndb_blocks_iterate_startPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ndb_blocks>,
        ffi.Pointer<ndb_block_iterator>,
      )
    >
  >('ndb_blocks_iterate_start');
  late final _ndb_blocks_iterate_start =
      _ndb_blocks_iterate_startPtr
          .asFunction<
            void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ndb_blocks>,
              ffi.Pointer<ndb_block_iterator>,
            )
          >();

  ffi.Pointer<ndb_block> ndb_blocks_iterate_next(
    ffi.Pointer<ndb_block_iterator> arg0,
  ) {
    return _ndb_blocks_iterate_next(arg0);
  }

  late final _ndb_blocks_iterate_nextPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ndb_block> Function(ffi.Pointer<ndb_block_iterator>)
    >
  >('ndb_blocks_iterate_next');
  late final _ndb_blocks_iterate_next =
      _ndb_blocks_iterate_nextPtr
          .asFunction<
            ffi.Pointer<ndb_block> Function(ffi.Pointer<ndb_block_iterator>)
          >();

  /// STR BLOCKS
  ffi.Pointer<ndb_str_block> ndb_block_str(ffi.Pointer<ndb_block> arg0) {
    return _ndb_block_str(arg0);
  }

  late final _ndb_block_strPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ndb_str_block> Function(ffi.Pointer<ndb_block>)
    >
  >('ndb_block_str');
  late final _ndb_block_str =
      _ndb_block_strPtr
          .asFunction<
            ffi.Pointer<ndb_str_block> Function(ffi.Pointer<ndb_block>)
          >();

  ffi.Pointer<ffi.Char> ndb_str_block_ptr(ffi.Pointer<ndb_str_block> arg0) {
    return _ndb_str_block_ptr(arg0);
  }

  late final _ndb_str_block_ptrPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ndb_str_block>)
    >
  >('ndb_str_block_ptr');
  late final _ndb_str_block_ptr =
      _ndb_str_block_ptrPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<ndb_str_block>)
          >();

  int ndb_str_block_len(ffi.Pointer<ndb_str_block> arg0) {
    return _ndb_str_block_len(arg0);
  }

  late final _ndb_str_block_lenPtr = _lookup<
    ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ndb_str_block>)>
  >('ndb_str_block_len');
  late final _ndb_str_block_len =
      _ndb_str_block_lenPtr
          .asFunction<int Function(ffi.Pointer<ndb_str_block>)>();

  /// BECH32 BLOCKS
  ffi.Pointer<nostr_bech32> ndb_bech32_block(ffi.Pointer<ndb_block> block) {
    return _ndb_bech32_block(block);
  }

  late final _ndb_bech32_blockPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<nostr_bech32> Function(ffi.Pointer<ndb_block>)
    >
  >('ndb_bech32_block');
  late final _ndb_bech32_block =
      _ndb_bech32_blockPtr
          .asFunction<
            ffi.Pointer<nostr_bech32> Function(ffi.Pointer<ndb_block>)
          >();
}

final class ndb_json_parser extends ffi.Opaque {}

final class Ndb extends ffi.Opaque {}

final class ndb_blocks extends ffi.Opaque {}

final class ndb_block extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  external UnnamedUnion1 block;
}

enum ndb_block_type {
  BLOCK_HASHTAG(1),
  BLOCK_TEXT(2),
  BLOCK_MENTION_INDEX(3),
  BLOCK_MENTION_BECH32(4),
  BLOCK_URL(5),
  BLOCK_INVOICE(6);

  final int value;
  const ndb_block_type(this.value);

  static ndb_block_type fromValue(int value) => switch (value) {
    1 => BLOCK_HASHTAG,
    2 => BLOCK_TEXT,
    3 => BLOCK_MENTION_INDEX,
    4 => BLOCK_MENTION_BECH32,
    5 => BLOCK_URL,
    6 => BLOCK_INVOICE,
    _ => throw ArgumentError("Unknown value for ndb_block_type: $value"),
  };
}

final class UnnamedUnion1 extends ffi.Union {
  external ndb_str_block str;

  external ndb_invoice_block invoice;

  external ndb_mention_bech32_block mention_bech32;

  @ffi.Uint32()
  external int mention_index;
}

final class ndb_str_block extends ffi.Struct {
  external ffi.Pointer<ffi.Char> str;

  @ffi.Uint32()
  external int len;
}

final class ndb_invoice_block extends ffi.Struct {
  external ndb_str_block invstr;

  external ndb_invoice invoice;
}

final class ndb_invoice extends ffi.Struct {
  @ffi.UnsignedChar()
  external int version;

  @ffi.Uint64()
  external int amount;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Uint64()
  external int expiry;

  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<ffi.UnsignedChar> description_hash;
}

final class ndb_mention_bech32_block extends ffi.Struct {
  external ndb_str_block str;

  external nostr_bech32 bech32;
}

final class nostr_bech32 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  external UnnamedUnion2 unnamed;
}

enum nostr_bech32_type {
  NOSTR_BECH32_NOTE(1),
  NOSTR_BECH32_NPUB(2),
  NOSTR_BECH32_NPROFILE(3),
  NOSTR_BECH32_NEVENT(4),
  NOSTR_BECH32_NRELAY(5),
  NOSTR_BECH32_NADDR(6),
  NOSTR_BECH32_NSEC(7);

  final int value;
  const nostr_bech32_type(this.value);

  static nostr_bech32_type fromValue(int value) => switch (value) {
    1 => NOSTR_BECH32_NOTE,
    2 => NOSTR_BECH32_NPUB,
    3 => NOSTR_BECH32_NPROFILE,
    4 => NOSTR_BECH32_NEVENT,
    5 => NOSTR_BECH32_NRELAY,
    6 => NOSTR_BECH32_NADDR,
    7 => NOSTR_BECH32_NSEC,
    _ => throw ArgumentError("Unknown value for nostr_bech32_type: $value"),
  };
}

final class UnnamedUnion2 extends ffi.Union {
  external bech32_note note;

  external bech32_npub npub;

  external bech32_nsec nsec;

  external bech32_nevent nevent;

  external bech32_nprofile nprofile;

  external bech32_naddr naddr;

  external bech32_nrelay nrelay;
}

final class bech32_note extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> event_id;
}

final class bech32_npub extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> pubkey;
}

final class bech32_nsec extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> nsec;
}

final class bech32_nevent extends ffi.Struct {
  external ndb_relays relays;

  external ffi.Pointer<ffi.UnsignedChar> event_id;

  /// optional
  external ffi.Pointer<ffi.UnsignedChar> pubkey;
}

final class ndb_relays extends ffi.Struct {
  @ffi.Array.multi([24])
  external ffi.Array<ndb_str_block> relays;

  @ffi.Int()
  external int num_relays;
}

final class bech32_nprofile extends ffi.Struct {
  external ndb_relays relays;

  external ffi.Pointer<ffi.UnsignedChar> pubkey;
}

final class bech32_naddr extends ffi.Struct {
  external ndb_relays relays;

  external ndb_str_block identifier;

  external ffi.Pointer<ffi.UnsignedChar> pubkey;
}

final class bech32_nrelay extends ffi.Struct {
  external ndb_str_block relay;
}

final class NdbNote extends ffi.Opaque {}

final class ndb_tag extends ffi.Opaque {}

final class ndb_tags extends ffi.Opaque {}

final class ndb_lmdb extends ffi.Opaque {}

final class ndb_packed_str extends ffi.Opaque {}

final class bolt11 extends ffi.Opaque {}

/// some bindings like swift needs help with forward declared pointers
final class ndb_tag_ptr extends ffi.Struct {
  external ffi.Pointer<ndb_tag> ptr;
}

final class ndb_tags_ptr extends ffi.Struct {
  external ffi.Pointer<ndb_tags> ptr;
}

final class ndb_block_ptr extends ffi.Struct {
  external ffi.Pointer<ndb_block> ptr;
}

final class ndb_blocks_ptr extends ffi.Struct {
  external ffi.Pointer<ndb_blocks> ptr;
}

final class ndb_note_ptr extends ffi.Struct {
  external ffi.Pointer<NdbNote> ptr;
}

final class ndb_t extends ffi.Struct {
  external ffi.Pointer<Ndb> ndb;
}

final class ndb_str extends ffi.Struct {
  @ffi.UnsignedChar()
  external int flag;

  external UnnamedUnion3 unnamed;
}

final class UnnamedUnion3 extends ffi.Union {
  external ffi.Pointer<ffi.Char> str;

  external ffi.Pointer<ffi.UnsignedChar> id;
}

final class ndb_ingest_meta extends ffi.Struct {
  @ffi.UnsignedInt()
  external int client;

  external ffi.Pointer<ffi.Char> relay;
}

final class ndb_keypair extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedChar> pubkey;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedChar> secret;

  /// this corresponds to secp256k1's keypair type. it's guaranteed to
  /// be 96 bytes according to their docs. I don't want to depend on
  /// the secp256k1 header here so we just use raw bytes.
  @ffi.Array.multi([96])
  external ffi.Array<ffi.UnsignedChar> pair;
}

/// controls whether to continue or stop the json parser
enum ndb_idres {
  NDB_IDRES_CONT(0),
  NDB_IDRES_STOP(1);

  final int value;
  const ndb_idres(this.value);

  static ndb_idres fromValue(int value) => switch (value) {
    0 => NDB_IDRES_CONT,
    1 => NDB_IDRES_STOP,
    _ => throw ArgumentError("Unknown value for ndb_idres: $value"),
  };
}

/// id callback + closure data
final class ndb_id_cb extends ffi.Struct {
  external ndb_id_fn fn;

  external ffi.Pointer<ffi.Void> data;
}

/// function pointer for controlling what to do after we parse an id
typedef ndb_id_fn = ffi.Pointer<ffi.NativeFunction<ndb_id_fnFunction>>;
typedef ndb_id_fnFunction =
    ffi.UnsignedInt Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>);
typedef Dartndb_id_fnFunction =
    ndb_idres Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>);

/// required to keep a read
final class ndb_txn extends ffi.Struct {
  external ffi.Pointer<ndb_lmdb> lmdb;

  external ffi.Pointer<ffi.Void> mdb_txn;
}

final class ndb_event extends ffi.Struct {
  external ffi.Pointer<NdbNote> note;
}

final class ndb_command_result extends ffi.Struct {
  @ffi.Int()
  external int ok;

  external ffi.Pointer<ffi.Char> msg;

  @ffi.Int()
  external int msglen;
}

/// From-client event types
enum fce_type {
  NDB_FCE_EVENT(1);

  final int value;
  const fce_type(this.value);

  static fce_type fromValue(int value) => switch (value) {
    1 => NDB_FCE_EVENT,
    _ => throw ArgumentError("Unknown value for fce_type: $value"),
  };
}

/// To-client event types
enum tce_type {
  NDB_TCE_EVENT(1),
  NDB_TCE_OK(2),
  NDB_TCE_NOTICE(3),
  NDB_TCE_EOSE(4),
  NDB_TCE_AUTH(5);

  final int value;
  const tce_type(this.value);

  static tce_type fromValue(int value) => switch (value) {
    1 => NDB_TCE_EVENT,
    2 => NDB_TCE_OK,
    3 => NDB_TCE_NOTICE,
    4 => NDB_TCE_EOSE,
    5 => NDB_TCE_AUTH,
    _ => throw ArgumentError("Unknown value for tce_type: $value"),
  };
}

enum ndb_ingest_filter_action {
  NDB_INGEST_REJECT(0),
  NDB_INGEST_ACCEPT(1),
  NDB_INGEST_SKIP_VALIDATION(2);

  final int value;
  const ndb_ingest_filter_action(this.value);

  static ndb_ingest_filter_action fromValue(int value) => switch (value) {
    0 => NDB_INGEST_REJECT,
    1 => NDB_INGEST_ACCEPT,
    2 => NDB_INGEST_SKIP_VALIDATION,
    _ =>
      throw ArgumentError("Unknown value for ndb_ingest_filter_action: $value"),
  };
}

final class ndb_search_key extends ffi.Struct {
  @ffi.Array.multi([24])
  external ffi.Array<ffi.Char> search;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedChar> id;

  @ffi.Uint64()
  external int timestamp;
}

final class ndb_search extends ffi.Struct {
  external ffi.Pointer<ndb_search_key> key;

  @ffi.Uint64()
  external int profile_key;

  /// MDB_cursor *
  external ffi.Pointer<ffi.Void> cursor;
}

/// From-client event
final class ndb_fce extends ffi.Struct {
  @ffi.UnsignedInt()
  external int evtype;

  external UnnamedUnion4 unnamed;
}

final class UnnamedUnion4 extends ffi.Union {
  external ndb_event event;
}

/// To-client event
final class ndb_tce extends ffi.Struct {
  @ffi.UnsignedInt()
  external int evtype;

  external ffi.Pointer<ffi.Char> subid;

  @ffi.Int()
  external int subid_len;

  external UnnamedUnion5 unnamed;
}

final class UnnamedUnion5 extends ffi.Union {
  external ndb_event event;

  external ndb_command_result command_result;
}

enum ndb_filter_fieldtype {
  NDB_FILTER_IDS(1),
  NDB_FILTER_AUTHORS(2),
  NDB_FILTER_KINDS(3),
  NDB_FILTER_TAGS(4),
  NDB_FILTER_SINCE(5),
  NDB_FILTER_UNTIL(6),
  NDB_FILTER_LIMIT(7),
  NDB_FILTER_SEARCH(8);

  final int value;
  const ndb_filter_fieldtype(this.value);

  static ndb_filter_fieldtype fromValue(int value) => switch (value) {
    1 => NDB_FILTER_IDS,
    2 => NDB_FILTER_AUTHORS,
    3 => NDB_FILTER_KINDS,
    4 => NDB_FILTER_TAGS,
    5 => NDB_FILTER_SINCE,
    6 => NDB_FILTER_UNTIL,
    7 => NDB_FILTER_LIMIT,
    8 => NDB_FILTER_SEARCH,
    _ => throw ArgumentError("Unknown value for ndb_filter_fieldtype: $value"),
  };
}

/// when matching generic tags, we need to know if we're dealing with
/// a pointer to a 32-byte ID or a null terminated string
enum ndb_generic_element_type {
  NDB_ELEMENT_UNKNOWN(0),
  NDB_ELEMENT_STRING(1),
  NDB_ELEMENT_ID(2),
  NDB_ELEMENT_INT(3);

  final int value;
  const ndb_generic_element_type(this.value);

  static ndb_generic_element_type fromValue(int value) => switch (value) {
    0 => NDB_ELEMENT_UNKNOWN,
    1 => NDB_ELEMENT_STRING,
    2 => NDB_ELEMENT_ID,
    3 => NDB_ELEMENT_INT,
    _ =>
      throw ArgumentError("Unknown value for ndb_generic_element_type: $value"),
  };
}

enum ndb_search_order {
  NDB_ORDER_DESCENDING(0),
  NDB_ORDER_ASCENDING(1);

  final int value;
  const ndb_search_order(this.value);

  static ndb_search_order fromValue(int value) => switch (value) {
    0 => NDB_ORDER_DESCENDING,
    1 => NDB_ORDER_ASCENDING,
    _ => throw ArgumentError("Unknown value for ndb_search_order: $value"),
  };
}

enum ndb_dbs {
  NDB_DB_NOTE(0),
  NDB_DB_META(1),
  NDB_DB_PROFILE(2),
  NDB_DB_NOTE_ID(3),

  /// profile pk index
  NDB_DB_PROFILE_PK(4),
  NDB_DB_NDB_META(5),
  NDB_DB_PROFILE_SEARCH(6),
  NDB_DB_PROFILE_LAST_FETCH(7),

  /// note kind index
  NDB_DB_NOTE_KIND(8),

  /// note fulltext index
  NDB_DB_NOTE_TEXT(9),

  /// parsed note blocks for rendering
  NDB_DB_NOTE_BLOCKS(10),

  /// note tags index
  NDB_DB_NOTE_TAGS(11),

  /// note pubkey index
  NDB_DB_NOTE_PUBKEY(12),

  /// note pubkey kind index
  NDB_DB_NOTE_PUBKEY_KIND(13),

  /// relay+kind+created -> note_id
  NDB_DB_NOTE_RELAY_KIND(14),

  /// note_id -> relays
  NDB_DB_NOTE_RELAYS(15),
  NDB_DBS(16);

  final int value;
  const ndb_dbs(this.value);

  static ndb_dbs fromValue(int value) => switch (value) {
    0 => NDB_DB_NOTE,
    1 => NDB_DB_META,
    2 => NDB_DB_PROFILE,
    3 => NDB_DB_NOTE_ID,
    4 => NDB_DB_PROFILE_PK,
    5 => NDB_DB_NDB_META,
    6 => NDB_DB_PROFILE_SEARCH,
    7 => NDB_DB_PROFILE_LAST_FETCH,
    8 => NDB_DB_NOTE_KIND,
    9 => NDB_DB_NOTE_TEXT,
    10 => NDB_DB_NOTE_BLOCKS,
    11 => NDB_DB_NOTE_TAGS,
    12 => NDB_DB_NOTE_PUBKEY,
    13 => NDB_DB_NOTE_PUBKEY_KIND,
    14 => NDB_DB_NOTE_RELAY_KIND,
    15 => NDB_DB_NOTE_RELAYS,
    16 => NDB_DBS,
    _ => throw ArgumentError("Unknown value for ndb_dbs: $value"),
  };
}

/// common kinds. we collect stats on these in ndb_stat. mainly because I don't
/// want to deal with including a hashtable to the project.
enum ndb_common_kind {
  NDB_CKIND_PROFILE(0),
  NDB_CKIND_TEXT(1),
  NDB_CKIND_CONTACTS(2),
  NDB_CKIND_DM(3),
  NDB_CKIND_DELETE(4),
  NDB_CKIND_REPOST(5),
  NDB_CKIND_REACTION(6),
  NDB_CKIND_ZAP(7),
  NDB_CKIND_ZAP_REQUEST(8),
  NDB_CKIND_NWC_REQUEST(9),
  NDB_CKIND_NWC_RESPONSE(10),
  NDB_CKIND_HTTP_AUTH(11),
  NDB_CKIND_LIST(12),
  NDB_CKIND_LONGFORM(13),
  NDB_CKIND_STATUS(14),

  /// should always be last
  NDB_CKIND_COUNT(15);

  final int value;
  const ndb_common_kind(this.value);

  static ndb_common_kind fromValue(int value) => switch (value) {
    0 => NDB_CKIND_PROFILE,
    1 => NDB_CKIND_TEXT,
    2 => NDB_CKIND_CONTACTS,
    3 => NDB_CKIND_DM,
    4 => NDB_CKIND_DELETE,
    5 => NDB_CKIND_REPOST,
    6 => NDB_CKIND_REACTION,
    7 => NDB_CKIND_ZAP,
    8 => NDB_CKIND_ZAP_REQUEST,
    9 => NDB_CKIND_NWC_REQUEST,
    10 => NDB_CKIND_NWC_RESPONSE,
    11 => NDB_CKIND_HTTP_AUTH,
    12 => NDB_CKIND_LIST,
    13 => NDB_CKIND_LONGFORM,
    14 => NDB_CKIND_STATUS,
    15 => NDB_CKIND_COUNT,
    _ => throw ArgumentError("Unknown value for ndb_common_kind: $value"),
  };
}

final class ndb_builder extends ffi.Struct {
  external cursor mem;

  external cursor note_cur;

  external cursor strings;

  external cursor str_indices;

  external ffi.Pointer<NdbNote> note;

  external ffi.Pointer<ndb_tag> current_tag;
}

final class cursor extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> start;

  external ffi.Pointer<ffi.UnsignedChar> p;

  external ffi.Pointer<ffi.UnsignedChar> end;
}

final class ndb_note_relay_iterator extends ffi.Struct {
  external ffi.Pointer<ndb_txn> txn;

  @ffi.Uint64()
  external int note_key;

  @ffi.Int()
  external int cursor_op;

  external ffi.Pointer<ffi.Void> mdb_cur;
}

final class ndb_iterator extends ffi.Struct {
  external ffi.Pointer<NdbNote> note;

  external ffi.Pointer<ndb_tag> tag;

  /// current outer index
  @ffi.Int()
  external int index;
}

final class ndb_filter_string extends ffi.Struct {
  external ffi.Pointer<ffi.Char> string;

  @ffi.Int()
  external int len;
}

final class ndb_filter_element extends ffi.Union {
  external ndb_filter_string string;

  external ffi.Pointer<ffi.UnsignedChar> id;

  @ffi.Uint64()
  external int integer;
}

final class ndb_filter_field extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  @ffi.UnsignedInt()
  external int elem_type;

  /// for generic queries like #t
  @ffi.Char()
  external int tag;
}

final class ndb_filter_elements extends ffi.Opaque {}

final class ndb_filter extends ffi.Struct {
  external cursor elem_buf;

  external cursor data_buf;

  @ffi.Int()
  external int num_elements;

  @ffi.Int()
  external int finalized;

  @ffi.Int()
  external int current;

  /// struct ndb_filter_elements offsets into elem_buf
  ///
  /// TODO(jb55): this should probably be called fields. elements are
  /// the things within fields
  @ffi.Array.multi([7])
  external ffi.Array<ffi.Int> elements;
}

final class NdbConfig extends ffi.Struct {
  @ffi.Int()
  external int flags;

  @ffi.Int()
  external int ingester_threads;

  @ffi.Int()
  external int writer_scratch_buffer_size;

  @ffi.Size()
  external int mapsize;

  external ffi.Pointer<ffi.Void> filter_context;

  external ndb_ingest_filter_fn ingest_filter;

  external ffi.Pointer<ffi.Void> sub_cb_ctx;

  external ndb_sub_fn sub_cb;
}

typedef ndb_ingest_filter_fn =
    ffi.Pointer<ffi.NativeFunction<ndb_ingest_filter_fnFunction>>;
typedef ndb_ingest_filter_fnFunction =
    ffi.UnsignedInt Function(ffi.Pointer<ffi.Void>, ffi.Pointer<NdbNote>);
typedef Dartndb_ingest_filter_fnFunction =
    ndb_ingest_filter_action Function(
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<NdbNote>,
    );

/// callback function for when we receive new subscription results
typedef ndb_sub_fn = ffi.Pointer<ffi.NativeFunction<ndb_sub_fnFunction>>;
typedef ndb_sub_fnFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint64);
typedef Dartndb_sub_fnFunction = void Function(ffi.Pointer<ffi.Void>, int);

final class ndb_text_search_config extends ffi.Struct {
  @ffi.UnsignedInt()
  external int order;

  @ffi.Int()
  external int limit;
}

final class ndb_stat_counts extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  @ffi.Size()
  external int value_size;

  @ffi.Size()
  external int count;
}

final class NdbStat extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ndb_stat_counts> dbs;

  @ffi.Array.multi([15])
  external ffi.Array<ndb_stat_counts> common_kinds;

  external ndb_stat_counts other_kinds;
}

/// unpacked form of the actual lmdb fulltext search key
/// see `ndb_make_text_search_key` for how the packed version is constructed
final class ndb_text_search_key extends ffi.Struct {
  @ffi.Int()
  external int str_len;

  external ffi.Pointer<ffi.Char> str;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Uint64()
  external int note_id;

  @ffi.Uint64()
  external int word_index;
}

final class ndb_text_search_result extends ffi.Struct {
  external ndb_text_search_key key;

  @ffi.Int()
  external int prefix_chars;

  /// This is only set if we passed a filter for nip50 searches
  external ffi.Pointer<NdbNote> note;

  @ffi.Uint64()
  external int note_size;
}

final class ndb_text_search_results extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ndb_text_search_result> results;

  @ffi.Int()
  external int num_results;
}

final class ndb_block_iterator extends ffi.Struct {
  external ffi.Pointer<ffi.Char> content;

  external ffi.Pointer<ndb_blocks> blocks;

  external ndb_block block;

  external ffi.Pointer<ffi.UnsignedChar> p;
}

final class ndb_query_result extends ffi.Struct {
  external ffi.Pointer<NdbNote> note;

  @ffi.Uint64()
  external int note_size;

  @ffi.Uint64()
  external int note_id;
}

final class ndb_query_results extends ffi.Struct {
  external cursor cur;
}

typedef FILE = _IO_FILE;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef _IO_lock_t = ffi.Void;
typedef Dart_IO_lock_t = void;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

const int NDB_PACKED_STR = 1;

const int NDB_PACKED_ID = 2;

const int NDB_FLAG_NOMIGRATE = 1;

const int NDB_FLAG_SKIP_NOTE_VERIFY = 2;

const int NDB_FLAG_NO_FULLTEXT = 4;

const int NDB_FLAG_NO_NOTE_BLOCKS = 8;

const int NDB_FLAG_NO_STATS = 16;

const int NDB_NUM_FILTERS = 7;

const int MAX_TEXT_SEARCH_RESULTS = 128;

const int MAX_TEXT_SEARCH_WORDS = 8;

const int NDB_NUM_BLOCK_TYPES = 6;

const int NDB_MAX_RELAYS = 24;

const int NOSTR_BECH32_KNOWN_TYPES = 7;
